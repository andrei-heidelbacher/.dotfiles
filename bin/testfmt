#!/usr/bin/env python3
"""
Converts the tests of a given competitive programming task from one format to
another.
"""

from abc import ABCMeta, abstractmethod
import argparse
import glob
import os
import re


class Format(metaclass=ABCMeta):
    """"An abstract test format. """

    @abstractmethod
    def get_name(self):
        """"Returns the name of this format."""
        pass

    @abstractmethod
    def get_source_pattern(self, task_name):
        """Returns the test file name pattern to match when converting from this
        format to a different format.
        """
        pass

    @abstractmethod
    def get_target_pattern(self, task_name):
        """Returns the test file name pattern to use when converting from
        another format to this format.
        """
        pass


class InfoarenaFormat(Format):
    """The test format used at various competitions on infoarena.ro."""

    def get_name(self):
        return "infoarena"

    def get_source_pattern(self, task_name):
        return r"grader_test(\d+)"

    def get_target_pattern(self, task_name):
        return r"grader_test\1"


class OniFormat(Format):
    """"The test format used at various national competitions and olympiads."""

    def get_name(self):
        return "oni"

    def get_source_pattern(self, task_name):
        return r"(\d+)-" + task_name

    def get_target_pattern(self, task_name):
        return r"\1-" + task_name


def _get_renamed_file_path(file_path, source_pattern, target_pattern):
    file_name = os.path.basename(file_path)
    new_file_name = re.sub(
        r"^" + source_pattern + r"$",
        target_pattern,
        file_name)
    return os.path.join(os.path.dirname(file_path), new_file_name)


def _rename_file(file_path, source_pattern, target_pattern):
    new_file_path = _get_renamed_file_path(
        file_path=file_path,
        source_pattern=source_pattern,
        target_pattern=target_pattern)
    if file_path != new_file_path:
        os.rename(os.path.abspath(file_path), os.path.abspath(new_file_path))


def _rename_files(file_paths, source_pattern, target_pattern):
    for file_path in file_paths:
        _rename_file(file_path, source_pattern, target_pattern)


def _rename_files_in_dir(
        source_pattern,
        target_pattern,
        dir_path=".",
        glob_pattern="*"):
    _rename_files(
        file_paths=glob.iglob(os.path.join(dir_path, glob_pattern)),
        source_pattern=source_pattern,
        target_pattern=target_pattern)


def rename_tests(source_format, target_format, task_name, dir_path="."):
    """"Renames the tests from the given directory from the source format to the
    target format.
    """
    for ext in ["in", "out", "ok"]:
        source_pattern = (
            source_format.get_source_pattern(task_name) + r"\." + ext)
        target_pattern = (
            target_format.get_target_pattern(task_name) + r"." + ext)
        _rename_files_in_dir(
            source_pattern=source_pattern,
            target_pattern=target_pattern,
            dir_path=dir_path)


def main():
    """"Registers available test formats, parses arguments and reformats the
    test names accordingly.
    """
    infoarena_format = InfoarenaFormat()
    oni_format = OniFormat()
    formats = {
        infoarena_format.get_name(): infoarena_format,
        oni_format.get_name(): oni_format
    }

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-s", "--source",
        type=str,
        choices=formats.keys(),
        required=True,
        dest="source_format",
        help="source test format")
    parser.add_argument(
        "-t", "--target",
        type=str,
        choices=formats.keys(),
        required=True,
        dest="target_format",
        help="target test format")
    parser.add_argument(
        "-n", "--name",
        type=str,
        required=True,
        dest="task_name",
        help="the task name")
    parser.add_argument(
        "-d", "--dir",
        type=str,
        dest="dir_path",
        default=".",
        help="path to tests directory")
    args = parser.parse_args()

    rename_tests(
        formats[args.source_format],
        formats[args.target_format],
        args.task_name,
        dir_path=args.dir_path)


if __name__ == "__main__":
    main()
